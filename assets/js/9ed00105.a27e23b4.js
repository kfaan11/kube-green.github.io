"use strict";(self.webpackChunkkube_green_github_io=self.webpackChunkkube_green_github_io||[]).push([[9004],{8373:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=s(5893),r=s(1151);const i={sidebar_position:4},t="Configuration",l={id:"configuration",title:"Configuration",description:"In the namespace where you want to enable kube-green, apply the SleepInfo CRD.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/docs/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/kube-green/kube-green.github.io/edit/main/docs/configuration.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Install",permalink:"/docs/install"},next:{title:"Metrics",permalink:"/docs/metrics"}},a={},d=[{value:"Examples",id:"examples",level:2},{value:"Simplest SleepInfo resource",id:"simplest-sleepinfo-resource",level:3},{value:"Complete SleepInfo resource",id:"complete-sleepinfo-resource",level:3},{value:"Complete SleepInfo without wake up",id:"complete-sleepinfo-without-wake-up",level:3},{value:"Suspend only CronJobs",id:"suspend-only-cronjobs",level:3},{value:"Exclude reference",id:"exclude-reference",level:3}];function c(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["In the namespace where you want to enable ",(0,o.jsx)(n.em,{children:"kube-green"}),", apply the SleepInfo CRD.\nAn example of CRD is accessible ",(0,o.jsx)(n.a,{href:"https://github.com/kube-green/kube-green/blob/main/testdata/working-hours.yml",children:"at this link"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The SleepInfo spec contains:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"weekdays"}),(0,o.jsx)(n.br,{}),"\n","Day of the week. ",(0,o.jsx)(n.code,{children:"*"})," is every day, ",(0,o.jsx)(n.code,{children:"1"})," is monday, ",(0,o.jsx)(n.code,{children:"1-5"})," is from monday to friday"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"sleepAt"}),(0,o.jsx)(n.br,{}),"\n","Time in hours and minutes (HH",":mm",") when namespace will go to sleep. Valid values are, for example, ",(0,o.jsx)(n.code,{children:"19:00"})," or ",(0,o.jsx)(n.code,{children:"*:*"})," for every minute and every hour.",(0,o.jsx)(n.br,{}),"\n","Resources sleep will be deployments (setting replicas value to 0) and, if ",(0,o.jsx)(n.code,{children:"suspendCronjobs"})," option is set to true, cron jobs will be suspended."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"wakeUpAt"})," (",(0,o.jsx)(n.em,{children:"optional"}),")",(0,o.jsx)(n.br,{}),"\n","Time in hours and minutes (HH",":mm",") when namespace should be restored to the initial state (before sleep). Valid values are, for example, ",(0,o.jsx)(n.code,{children:"19:00"})," or ",(0,o.jsx)(n.code,{children:"*:*"})," for every minute and every hour. If wake up value is not set, pod in namespace will not be restored. So, you will need to deploy the initial namespace configuration to restore it."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"timeZone"})," (",(0,o.jsx)(n.em,{children:"optional"}),", default to ",(0,o.jsx)(n.em,{children:"UTC"}),")",(0,o.jsx)(n.br,{}),"\n","Time zone in IANA specification. For example for italian hour, set ",(0,o.jsx)(n.code,{children:"Europe/Rome"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"suspendDeployments"})," (",(0,o.jsx)(n.em,{children:"optional"}),", default to ",(0,o.jsx)(n.em,{children:"true"}),")",(0,o.jsx)(n.br,{}),"\n","If set to false, deployments will not be suspended during sleep mode.."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"suspendCronJobs"})," (",(0,o.jsx)(n.em,{children:"optional"}),", default to ",(0,o.jsx)(n.em,{children:"false"}),")",(0,o.jsx)(n.br,{}),"\n","If set to true, cronjobs will be suspended during sleep mode.."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"excludeRef"})," (",(0,o.jsx)(n.em,{children:"optional"}),")",(0,o.jsx)(n.br,{}),"\n","An array of object containing the resource to exclude from sleep. It can specify exactly the name of the specified resource or match based from the labels. The possible formats are:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"apiVersion"}),": Version of the resource. Now it is supported ",(0,o.jsx)(n.em,{children:'"apps/v1"'}),", ",(0,o.jsx)(n.em,{children:'"batch/v1beta1"'})," and ",(0,o.jsx)(n.em,{children:'"batch/v1"'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"kind"}),": The kind of resource. Now it is supported ",(0,o.jsx)(n.em,{children:'"Deployment"'})," and ",(0,o.jsx)(n.em,{children:'"CronJob"'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"name"}),": The name of the resource\nor"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"matchLabels"}),": an object of strings with the labels to identify a resources\nclick ",(0,o.jsx)(n.a,{href:"#exclude-reference",children:"here"})," to see an example."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"simplest-sleepinfo-resource",children:"Simplest SleepInfo resource"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kube-green.com/v1alpha1\nkind: SleepInfo\nmetadata:\n  name: working-hours\nspec:\n  weekdays: "1-5"\n  sleepAt: "20:00"\n  wakeUpAt: "08:00"\n  timeZone: "Europe/Rome"\n'})}),"\n",(0,o.jsx)(n.p,{children:"With this CRD, it's configured a sleep to 20:00 and wake up to 08:00 on weekdays only for Deployments."}),"\n",(0,o.jsx)(n.h3,{id:"complete-sleepinfo-resource",children:"Complete SleepInfo resource"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kube-green.com/v1alpha1\nkind: SleepInfo\nmetadata:\n  name: working-hours\nspec:\n  weekdays: "1-5"\n  sleepAt: "20:00"\n  wakeUpAt: "08:00"\n  timeZone: "Europe/Rome"\n  suspendCronJobs: true\n  excludeRef:\n    - apiVersion: "apps/v1"\n      kind:       Deployment\n      name:       api-gateway\n'})}),"\n",(0,o.jsx)(n.p,{children:"With this CRD, it's configured a sleep to 20:00 and wake up to 08:00 on weekdays, for Deployments and CronJobs, excluding the Deployment named api-gateway."}),"\n",(0,o.jsx)(n.h3,{id:"complete-sleepinfo-without-wake-up",children:"Complete SleepInfo without wake up"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kube-green.com/v1alpha1\nkind: SleepInfo\nmetadata:\n  name: working-hours\nspec:\n  weekdays: "1-5"\n  sleepAt: "20:00"\n  timeZone: "Europe/Rome"\n  suspendCronJobs: true\n  excludeRef:\n    - apiVersion: "apps/v1"\n      kind:       Deployment\n      name:       api-gateway\n'})}),"\n",(0,o.jsx)(n.p,{children:"With this CRD, it's configured a sleep to 20:00 on weekdays, for Deployments and CronJobs, excluding the Deployment named api-gateway. To wake up, you must redeploy all the resources to set to the initial state."}),"\n",(0,o.jsx)(n.h3,{id:"suspend-only-cronjobs",children:"Suspend only CronJobs"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kube-green.com/v1alpha1\nkind: SleepInfo\nmetadata:\n  name: working-hours\nspec:\n  weekdays: "*"\n  sleepAt: "20:00"\n  wakeUpAt: "08:00"\n  suspendCronJobs: true\n  suspendDeployments: false\n  excludeRef:\n    - apiVersion: "batch/v1"\n      kind:       CronJob\n      name:       do-not-suspend\n'})}),"\n",(0,o.jsxs)(n.p,{children:["With this CRD, it's configured a sleep to 20:00 and wake up to 08:00 on weekdays, only for CronJobs (sleep of Deployments are inactive), excluding the CronJob ",(0,o.jsx)(n.code,{children:"do-not-suspend"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"exclude-reference",children:"Exclude reference"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kube-green.com/v1alpha1\nkind: SleepInfo\nmetadata:\n  name: working-hours\nspec:\n  weekdays: "*"\n  sleepAt: "20:00"\n  wakeUpAt: "08:00"\n  suspendCronJobs: true\n  excludeRef:\n    - apiVersion: "batch/v1"\n      kind:       CronJob\n      name:       do-not-suspend\n    - matchLabels: \n        kube-green.dev/exclude: true\n'})}),"\n",(0,o.jsxs)(n.p,{children:["With this CRD, it's configured a sleep to 20:00 and wake up to 08:00 on weekdays, excluding the CronJob ",(0,o.jsx)(n.code,{children:"do-not-suspend"})," and all the supported resources with the label ",(0,o.jsx)(n.code,{children:"kube-green.dev/exclude: true"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>t});var o=s(7294);const r={},i=o.createContext(r);function t(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);